package com.itheima.oschina.ui.fragment;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.ImageView;
import android.widget.LinearLayout;

import com.itheima.oschina.R;
import com.itheima.oschina.ui.fragment.base.BaseFragment;
import com.itheima.oschina.ui.view.CircleImageView;
import com.itheima.oschina.util.DrawCircle;
import com.itheima.oschina.util.DrawableUtils;

public class MeFragment extends BaseFragment {

	private LinearLayout ll_framgmentme_header;

	@Override
	protected View getSuccessView() {

		View view=View.inflate(getActivity(), R.layout.frame_me, null);
		ll_framgmentme_header = (LinearLayout) view.findViewById(R.id.ll_framgmentme_header);
		//设置背景
		ViewTreeObserver viewTreeObserver = ll_framgmentme_header.getViewTreeObserver();
		viewTreeObserver.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
			@Override
			public void onGlobalLayout() {
				//获取宽高
				int height = ll_framgmentme_header.getHeight();
				int width = ll_framgmentme_header.getWidth();
				//设置图片
				Options options = new Options();
				options.inJustDecodeBounds = true;
				BitmapFactory.decodeResource(getResources(), R.drawable.user_center_bg,options);
				int outWidth = options.outWidth;
				int outHeight = options.outHeight;
				//3，计算比例
				int widthScale = outWidth/width;
				int heightScale = outHeight/height ; 
				int scale = widthScale > heightScale ? widthScale : heightScale;

				//4，给图片设置缩减
				options.inJustDecodeBounds = false; // 加载器就会返回图片了
				options.inSampleSize=scale;
				Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.user_center_bg, options);
				ll_framgmentme_header.setBackgroundDrawable(new BitmapDrawable(bitmap));
			}
		});
		//设置头像圆角
		setCircle(view);
		//初始化按钮
		initmenu(view);
		return view;
	}


	/**
     * 设置圆角
     */
    private void setCircle(View view) {
    	Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.widget_dface);
    	Bitmap circleMap = DrawCircle.circleMap(bitmap, bitmap.getWidth());
    	ImageView imageView=(ImageView) view.findViewById(R.id.ib_fragmentme_info);
    	imageView.setImageBitmap(circleMap);
    	
	}
    

     /**
      * 初始化菜单
      * @param view
      */
	private void initmenu(View view) {
		LinearLayout ll_frameme_score = (LinearLayout) view.findViewById(R.id.ll_frameme_score);
		LinearLayout ll_frameme_collect =(LinearLayout) view.findViewById(R.id.ll_frameme_collect);
		LinearLayout ll_frameme_attention =(LinearLayout) view.findViewById(R.id.ll_frameme_attention);
		LinearLayout ll_frameme_fans =(LinearLayout) view.findViewById(R.id.ll_frameme_fans);
		
		ll_frameme_score.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				
			}
		});
		ll_frameme_collect.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				
			}
		});
		ll_frameme_attention.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				
			}
		});
		ll_frameme_fans.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				
			}
		});
	}


	@Override
	protected Object requestData() {
		String url="aassa";
		return url;
	}
}
